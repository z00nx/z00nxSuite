#!/usr/bin/env python2
import argparse
import os
import sys
import re
import ConfigParser
import json
try:
    import volatility.obj as obj
    import volatility.registry as registry
    HAVE_VOLATILITY = True
except ImportError:
    HAVE_VOLATILITY = False

parser = argparse.ArgumentParser(description='Generate volatilityrc files from dumpt json files')
parser.add_argument('--file', '-f', type=argparse.FileType('r'), required=True)
parser.add_argument('--force', action='store_true')
args = parser.parse_args()

input_filename = os.path.realpath(args.file.name)
dump_filename = re.sub(r'\.json$', '.dmp', input_filename)
input_file = open(input_filename, 'r')
output_filename = os.path.dirname(os.path.realpath(args.file.name)) + '/volatilityrc'

data = json.load(input_file)
kdDebuggerData = data['debugInfo']['kdDebuggerData']
architectureType = data['machineInfo']['architectureType']
majorVersion = data['osVersion']['majorVersion']
minorVersion = data['osVersion']['minorVersion']
buildNumber = data['osVersion']['buildNumber']
# Volatility treats Windows 10's major/minor version as 6.4
if majorVersion == 10 and minorVersion == 0:
    majorVersion, minorVersion = 6, 4

if os.path.exists(output_filename) and not args.force:
    print("A file already exists for the default output filename. Aborting. either delete %s or rerun with '--force'" % output_filename)
    sys.exit(1)
output_file = open(output_filename, 'w')
if data['machineInfo']['architectureType'] == 'x64':
    kdbg = '0x%xL' % (kdDebuggerData & 0xffffffffffff)
else:
    kdbg = '0x%xL' % (kdDebuggerData & 0xffffffff)

guessed_profile = 'WinXPSP2x86'
if HAVE_VOLATILITY:
    registry.PluginImporter()
    profiles = registry.get_plugin_classes(obj.Profile)
    for profile_name, profile in profiles.iteritems():
        if (architectureType == 'x64' and profile._md_memory_model == '64bit') or (architectureType == 'x32' and profile._md_memory_model == '32bit'):
            if profile._md_major == majorVersion and profile._md_minor == minorVersion and hasattr(profile, '_md_build') and profile._md_build == buildNumber:
                guessed_profile = profile_name
                print('Found')
                break

config = ConfigParser.RawConfigParser()
config.optionxform = str
config.set('DEFAULT', 'KDBG', kdbg)
config.set('DEFAULT', 'LOCATION', ("file://%s" % dump_filename))
config.set('DEFAULT', 'PROFILE', guessed_profile)
config.write(output_file)
print('Input JSON: %s' % input_filename)
print('Input DMP: %s' % dump_filename)
print('Output: %s' % output_filename)
print('KDBG: %s' % kdbg)
print('Profile: %s' % guessed_profile)
